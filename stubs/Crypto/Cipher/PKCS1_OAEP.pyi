from types import ModuleType
from typing import Union, Callable

from Crypto.PublicKey.RSA import RsaKey
from Crypto.common import HashAlgorithm


class PKCS1OAEP_Cipher:
    def __init__(self, key: RsaKey, hashAlgo: Union[ModuleType, HashAlgorithm], mgfunc: Callable, label: Union[bytes, bytearray, memoryview], randfunc: Callable) -> None: ...
    def can_encrypt(self) -> bool: ...
    def can_decrypt(self) -> bool: ...
    def encrypt(self, message: Union[bytes, bytearray, memoryview]) -> bytes: ...
    def decrypt(self, ciphertext: Union[bytes, bytearray, memoryview]) -> bytes: ...

def new(key, hashAlgo: Union[ModuleType, HashAlgorithm], mgfunc: Callable, label: bytes, randfunc: Callable) -> PKCS1OAEP_Cipher: ...
