from typing import List, Dict, Tuple, Any, Union

from Cryptodome.Cipher._mode_ctr import CtrMode
from Cryptodome.Cipher._mode_gcm import GcmMode
from Cryptodome.Random import get_random_bytes as _get_random_bytes
from Cryptodome.Random.random import shuffle as _shuffle
from Types import AddressTuple

get_random_bytes = _get_random_bytes
shuffle = _shuffle

def b2i(int_in_bytes: bytes) -> int: ...
def i2b(integer: int, length: int) -> bytes: ...
def b2ip(ip_as_bytes: bytes) -> str: ...
def ip2b(ip_as_str: str) -> bytes: ...
def parse_ip_port(ip_port: str) -> AddressTuple: ...
def padded(byte_seq: bytes, blocksize: int) -> bytes: ...
def prependlength(packet: bytes) -> bytes: ...
def items_from_file(filepath: str) -> List[str]: ...
def read_cfg_file(filepath: str) -> Dict[str, str]: ...
def read_cfg_values(filepath: str) -> List[str]: ...
def partitions(sequence: Union[List[Any], str], part_size: int) -> int: ...
def partitioned(sequence: Union[List[Any], str], part_size: int) -> List[Any]: ...
def byte_len(integer: int) -> int: ...
def random_channel_id() -> int: ...
def cut(sequence: bytes, *cut_points: int) -> Tuple[bytes, ...]: ...
def gen_sym_key() -> bytes: ...
def gen_ctr_prefix() -> int: ...
def ctr_cipher(key: bytes, counter: int) -> CtrMode: ...
def gcm_cipher(key: bytes, counter: int) -> GcmMode: ...
def link_encrypt(key: bytes, link_ctr: int, packet: bytes) -> bytes: ...
def link_decrypt(key: bytes, packet: bytes) -> Tuple[int, int, bytes, bytes, bytes]: ...
def check_replay_window(ctr_list: List[int], ctr: int) -> bool: ...