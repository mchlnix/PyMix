from typing import List, Sequence, Dict, Tuple

from Crypto.Cipher._mode_ctr import CtrMode
from Crypto.Cipher._mode_gcm import GcmMode

from Types import AddressTuple


def b2i(int_in_bytes: bytes) -> int: ...
def i2b(integer: int, length: int) -> bytes: ...
def b2ip(ip_as_bytes: bytes) -> str: ...
def ip2b(ip_as_str: str) -> bytes: ...
def parse_ip_port(ip_port: str) -> AddressTuple: ...
def padded(byte_seq: bytes, blocksize: int) -> bytes: ...
def prependlength(packet: bytes) -> bytes: ...
def items_from_file(filepath: str) -> List[str]: ...
def read_cfg_file(filepath: str) -> Dict[str, str]: ...
def read_cfg_values(filepath: str) -> List[str]: ...
def partitions(sequence: Sequence, part_size: int) -> int: ...
def partitioned(sequence: Sequence, part_size: int) -> list: ...
def byte_len(integer: int) -> int: ...
def random_channel_id() -> int: ...
def cut(sequence: bytes, *cut_points: int) -> Tuple[bytes, ...]: ...
def gen_sym_key() -> bytes: ...
def gen_ctr_prefix() -> int: ...
def ctr_cipher(key: bytes, counter: int) -> CtrMode: ...
def gcm_cipher(key: bytes, counter: int) -> GcmMode: ...
def link_encrypt(key: bytes, packet: bytes) -> bytes: ...
def link_decrypt(key: bytes, packet: bytes) -> Tuple[int, bytes, bytes]: ...