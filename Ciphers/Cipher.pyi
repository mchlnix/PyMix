from typing import List, Union

from Crypto.Cipher._mode_cbc import CbcMode
from Crypto.Cipher._mode_ecb import EcbMode

GenericCipher = Union[CbcMode, EcbMode]

class Cipher:
    encryptors: List[GenericCipher]
    decryptors: List[GenericCipher]
    stages: int
    def __init__(self, encryptors: List[GenericCipher], decryptors: List[GenericCipher]) -> None: ...
    def decrypt(self, data: bytes) -> bytes: ...
    def encrypt(self, data: bytes) -> bytes: ...
    def prepare_data(self, data: bytes) -> bytes: ...

    @staticmethod
    def finalize_data(data: bytes) -> bytes: ...
    @staticmethod
    def encrypt_with_data(plain_text: bytes, additional_data: List) -> bytes: ...


def default_cipher(keys: List[bytes], iv: int) -> Cipher: ...
def gen_iv() -> bytes: ...
